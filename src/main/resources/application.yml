server:
    port: 8083

spring:
    application:
        name: transaction-service
    datasource:
        #postgres local database
        url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/test_transaction}
        username: ${DATABASE_USER:postgres}
        password: ${DATABASE_PASS:postgres1}
    jpa:
        hibernate:
            ddl-auto: update

    output:
        ansi:
            enabled: ALWAYS

    rabbitmq:
      host: rabbitmq

logging:
    level:
        com:
            skillstorm: debug

#setting up the spring actuator endpoints that are exposed and what endpoint to access the metrics
management:
    endpoints:
        web:
            exposure:
                include: "*"  # endpoints: httpexchanges, metrics, env, beans, info, conditions, health, startup
            base-path: /transactions/actuator
    endpoint:
        health:
            show-details: always
            
    #pushes the actuator metrics to CloudWatch and CloudWatch will be able to monitor these metrics
    metrics:
        export:
            cloudwatch:
                enabled: true
                namespace: transaction-service
                step: 1m

eureka:
    client:
        service-url:
            defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}
    instance:
        leaseRenewalIntervalInSeconds: 30

# creating the rabbitmq fanout exchange
exchanges:
    fanout: delete-user

queues:
    fanout: deleteUserTransactionsQueue

# creating the routing key for the exchange
routing-key: key1234


